native libs/libmatrix_lib
{
    num create_matrix(num, num, list);
    num create_identity(num);
    num create_zeros(num, num);
    num create_rand(num, num, num);
    void delete_matrix(num);
    void print_matrix(num);
    str str_matrix(num);
    list get_matrix(num);
    bool set_matrix(num, list);
    num get_matrix_rows(num)
    num get_matrix_cols(num)
    num invert_matrix(num);
    num transpose_matrix(num);
    num add_matrix_scalar(num, num);
    num add_matrix(num, num);
    num subtract_matrix_scalar(num, num);
    num subtract_matrix(num, num);
    num multiply_matrix_scalar(num, num);
    num multiply_matrix(num, num);
    num divide_matrix_scalar(num, num);
    num divide_matrix(num, num);
    num  exponent_matrix_scalar(num, num);
    bool compare_matrix(num, num);
    num determinant_matrix(num);
    list eigenvalues_matrix(num);
    num row_swap_matrix(num, num, num);
    list get_matrix_row(num, num);
    bool set_matrix_row(num, num, list);
    list get_matrix_column(num, num);
    bool set_matrix_column(num, num, list);
    num get_matrix_element(num, num, num);
    bool set_matrix_element(num, num, num, num);
}

class Mat
{
    var ptr;
    var m, n;
    var __allow_insecure_operations;

    func init(data)
    {
        if(data is not null)
        {
            if(!__validate(data))
                throw('Invalid data in matrix. Only numeric values allowed')
            if(data is num)
                data = [[data]]
            else if(data is list and len(data) == 0)
                data = [data]
            else if(data is list and data[0] is not list)
                data = [data]
            
            for(var i = 0; i < len(data)-1; ++i)
            {
                if(len(data[i]) != len(data[i+1]))
                    throw('Matrix dimensions does not match')
            }

            if(__dims(data) > 2)
                throw('Only bi-dimensional matrix supported')
            
            m = len(data)
            n = len(data[0])
            ptr = create_matrix(m, n, data)
            if(ptr is null)
                throw('Could not initialize the matrix')
        }
        else
        {
            m = 0
            n = 0
            ptr = null
        }
    }

    func release()
    {
        delete_matrix(ptr)
        ptr = null
    }

    func size()
    {
        return [m, n]
    }

    func inverse()
    {
        var mat = Mat(null)
        mat.m = m
        mat.n = n
        mat.ptr = invert_matrix(ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not invert the matrix')
        }
        return mat
    }

    func transpose()
    {
        var mat = Mat(null)
        mat.m = m
        mat.n = n
        mat.ptr = transpose_matrix(ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not transpose the matrix')
        }
        return mat
    }

    func determinant()
    {
        return determinant_matrix(ptr);
    }

    func eigenValues()
    {
        return eigenvalues_matrix(ptr);
    }

    func rowSwap(a, b)
    {
        var mat = Mat(null)
        mat.m = m
        mat.n = n
        mat.ptr = row_swap_matrix(ptr, a, b)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not swap the rows in matrix')
        }
        return mat
    } 

    func clone()
    {
        var mat = Mat(null)
        mat.m = m
        mat.n = n
        mat.ptr = clone_matrix(ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not clone the matrix')
        }
        return mat
    }

    func ==(other)
    {
        return compare_matrix(ptr, other.ptr);
    }

    func +(other)
    {
        var mat = Mat(null)
        if(other is num)
            mat.ptr = add_matrix_scalar(ptr, other)
        else
            mat.ptr = add_matrix(ptr, other.ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not sum the matrices')
        }
        else
        {
            mat.m = get_matrix_rows(mat.ptr)
            mat.n = get_matrix_cols(mat.ptr)
        }
        return mat
    }

    func -(other)
    {
        var mat = Mat(null)
        if(other is num)
            mat.ptr = subtract_matrix_scalar(ptr, other)
        else
            mat.ptr = subtract_matrix(ptr, other.ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not subtract the matrices')
        }
        else
        {
            mat.m = get_matrix_rows(mat.ptr)
            mat.n = get_matrix_cols(mat.ptr)
        }
        return mat
    }

    func *(other)
    {
        var mat = Mat(null)
        if(other is num)
            mat.ptr = multiply_matrix_scalar(ptr, other)
        else
            mat.ptr = multiply_matrix(ptr, other.ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not multiply the matrices')
        }
        else
        {
            mat.m = get_matrix_rows(mat.ptr)
            mat.n = get_matrix_cols(mat.ptr)
        }
        return mat
    }

    func /(other)
    {
        var mat = Mat(null)
        if(other is num)
            mat.ptr = divide_matrix_scalar(ptr, other)
        else
            mat.ptr = divide_matrix(ptr, other.ptr)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not divide (A*B^-1) the matrices')
        }
        else
        {
            mat.m = get_matrix_rows(mat.ptr)
            mat.n = get_matrix_cols(mat.ptr)
        }
        return mat
    }

    func ^(n)
    {
        if(n is not num)
            throw('Matrix exponent must be a number')

        var mat = Mat(null)
        mat.ptr = exponent_matrix_scalar(ptr, n)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not exponentiate the matrix')
        }
        else
        {
            mat.m = get_matrix_rows(mat.ptr)
            mat.n = get_matrix_cols(mat.ptr)
        }
        return mat
    }

    func [](i)
    {
        return get(i, null)
    }

    func [=](i, v)
    {
        set(i, null, v)
    }

    func get(i, j)
    {
        if(i is not num)
        {
            if(i is null)
            {
                if(j is null)
                    return get_matrix(ptr)
                else
                {
                    if(j is not num)
                        throw('Column must be a number')

                    return get_matrix_column(ptr, j)
                }
            }
            throw('Row must be a number')
        }
        
        if(j is null)
            return get_matrix_row(ptr, i)
        else
        {
            if(j is not num)
                throw('Column must be a number')
            return get_matrix_element(ptr, i, j)
        }
    }

    func set(i, j, v)
    {
        if(!__validate(v))
            throw('Invalid values in matrix. Only numeric values allowed')

        if(i is not num)
        {
            if(i is null)
            {
                if(j is null)
                {
                    if(v is not list or len(v) != m or v[0] is not list or len(v[0]) != n)
                        throw('Invalid matrix dimnsions')
                    return set_matrix(ptr, v)
                }
                else
                {
                    if(j is not num)
                        throw('Column must be a number')

                    if(v is not list or len(v) != m)
                        throw('Invalid column length')

                    return set_matrix_column(ptr, j, v)
                }
            }
            throw('Row must be a number')
        }
        
        if(j is null)
        {
            if(v is not list or len(v) != n)
                throw('Invalid row length')

            return set_matrix_row(ptr, i, v)
        }
        else
        {
            if(j is not num)
                throw('Column must be a number')
            return set_matrix_element(ptr, i, j, v)
        }
    }

    func print()
    {
        print_matrix(ptr);
    }

    func getData()
    {
        return get_matrix(ptr);
    }

    func str()
    {
        return str_matrix(ptr)
    }

    static func identity(l)
    {
        var mat = Mat(null)
        mat.m = l
        mat.n = l
        mat.ptr = create_identity(l)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not initialize the matrix')
        }
        return mat
    }

    static func zeros(m, n)
    {
        if(m is null)
            m = 1
        if(n is null)
            n = m

        var mat = Mat(null)
    
        mat.m = m
        mat.n = n
        mat.ptr = create_zeros(m, n)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not initialize the matrix')
        }
        return mat
    }

    static func rand(m, n, mod)
    {
        if(m is null)
            m = 1
        if(n is null)
            n = m
        if(mod is null)
            mod = 100

        var mat = Mat(null)
    
        mat.m = m
        mat.n = n
        mat.ptr = create_rand(m, n, mod)
        if(mat.ptr is null)
        {
            mat = null
            throw('Could not initialize the matrix')
        }
        return mat
    }

    static func solve(a, b)
    {
        return a^-1 * b
    }

    func __validate(value)
    {
        if(value is num)
            return true
        else if(value is list)
        {
            for(var v in value)
            {
                if(!__validate(v))
                    return false
            }
            return true
        }
        return false
    }

    func __dims(d)
    {
        if(len(d) > 0 and d[0] is list)
            return __dims(d[0]) + 1
        return 1
    }
}

class Vec : Mat
{
    func init(data)
    {
        super.init(data)
        data = getData();
        if(len(data[0]) > 1)
        {
            if(len(data) > 1)
                throw('Vec cannot have more than 1 element in one of its dimensions')
            else
            {
                var d = data[0]
                data = []
                for(var i in d)
                {
                    data.add([i])
                }
                delete_matrix(ptr);
                m = len(data)
                n = len(data[0])
                ptr = create_matrix(m, n, data)
                if(ptr is null)
                    throw('Could not initialize the matrix')
            }
        }
    }

    static func zeros(m)
    {
        return Mat.zeros(m, 1)
    }

    static func rand(m, mod)
    {
        return Mat.rand(m, 1, mod)
    }
}