func measureTime(f)
{
    args = args.from(nargs)
    var start = clock()
    var res = f(*args)
    var elapsed = clock() - start
    println('Elapsed time: ${elapsed}s')
    return res
}

func border(f, c, n)
{
    println(c * n)
    args = args.from(nargs)
    var res = f(*args)
    println(c * n)
    return res
}

func forceArgs(f, n)
{
    args = args.from(nargs)
    if(len(args) != n)
    {
        throw('Invalid number of arguments for ${f}. Expect ${n} but got ', len(args))
    }
    return f(*args)
}

func ensureArgs(f)
{
    var n = arity(f)
    args = args.from(nargs)
    if(len(args) != n)
    {
        throw('Invalid number of arguments for ${f}. Expect ${n} but got ', len(args))
    }
    return f(*args)
}

func defaultReturn(f, def)
{
    args = args.from(nargs)
    var res = f(*args)
    if(res is null)
        res = def
    return res
}