native libs/libbgl
{
    int32 create_window(cstring, cbool, int32, int32, int32, int32, int32);
    void select_window(int32);
    void set_cartesian(cbool);
    float32 z_plane();
    cbool is_open();
    cbool is_fullscreen();
    float32 window_width();
    float32 window_height();
    void set_background_float(float32, float32, float32);
    void set_background_int(int32, int32, int32);
    void set_fullscreen(cbool);
    void toogle_fullscreen();
    cbool capture_bgl(cstring);
    cbool start_recording(cstring, int32);
    void stop_recording();
    void pause_bgl(float32);
    void show_bgl();

    int32 create_element(int32, cstring);
    int32 create_plot(int32, int32, int32, cstring);
    int32 find_element(cstring);

    void set_animation_callback(func);
    void set_keyboard_callback(func);
    void set_mouse_callback(func);

    int32 add_element(int32, int32);

    void rotate_element(int32, float32, float32, float32);
    void rotate_to_element(int32, float32, float32, float32);
    void rotate_to_x_element(int32, float32);
    void rotate_to_y_element(int32, float32);
    void rotate_to_z_element(int32, float32);
    void translate_element(int32, float32, float32, float32);
    void move_element(int32, float32, float32, float32);
    void flip_element(int32, cbool, cbool, cbool);
    void scale_element(int32, float32, float32, float32);
    void scale_to_element(int32, float32, float32, float32);
    void color_element_float(int32, float32, float32, float32, float32);
    void color_element_int(int32, int32, int32, int32, int32);
    void color_point_element_float(int32, int32, float32, float32, float32, float32);
    void color_point_element_int(int32, int32, int32, int32, int32, int32);
    void wireframe_element(int32, cbool);

    void set_text_element(int32, cstring, int32);
    void point_2d_element(int32, float32, float32, int32);
    void point_3d_element(int32, float32, float32, float32, int32);
    void line_2d_element(int32, float32, float32, float32, float32, int32);
    void line_3d_element(int32, float32, float32, float32, float32, float32, float32, int32);
    void triangle_2d_element(int32, float32, float32, float32, float32, float32, float32, int32);
    void triangle_3d_element(int32, float32, float32, float32, float32, float32, float32, float32, float32, float32, int32);
    void rectangle_2d_element(int32, float32, float32, float32, float32, int32);
    void rectangle_3d_element(int32, float32, float32, float32, float32, float32, float32, int32);
    void circle_2d_element(int32, float32, float32, float32);
    void circle_3d_element(int32, float32, float32, float32, float32);
    void glow_element(int32, float32, float32);
    void glow_at_element(int32, int32, int32);

    void map_element(int32);
    void reshape_element(int32, int32, cbool);

    float32 text_width_element(int32);
    float32 text_height_element(int32);
    void text_align_element(int32, int32);

    int32 new_point_element(int32, float32, float32, float32);

    float32 time_window();

    cbool loaded_font_element(int32);
    cbool load_font_element(int32, cstring);
    cbool fill_font_element(int32, cbytes);
    void default_font_element(int32, int32);
    cbool available_texture_element(int32);
    cbool load_texture_element(int32, cstring);
    void fill_texture_element(int32, uint32, uint32, uint32, cbytes);
    void update_texture_element(int32, cbytes);
    void apply_colors_element(int32, cbool);
    cbool get_apply_colors_element(int32);
    void stroke_element(int32, float32);
    float32 get_stroke_element(int32);
    void visible_element(int32, cbool);
    cbool get_visible_element(int32);
    cbool supports_capture_texture_element();
    cbool capture_device_int_texture_element(int32, int32);
    cbool capture_device_string_texture_element(int32, cstring);
    void capture_device_texture_element(int32);
    void auto_capture_texture_element(int32, cbool);
    cbool get_auto_capture_texture_element(int32);


    void rotate_light(int32, float32, float32, float32);
    void rotate_to_light(int32, float32, float32, float32);
    void rotate_to_x_light(int32, float32);
    void rotate_to_y_light(int32, float32);
    void rotate_to_z_light(int32, float32);
    void translate_light(int32, float32, float32, float32);
    void move_light(int32, float32, float32, float32);
    void rotate_around_light(int32, int32, float32, float32, float32);
    void rotate_around_to_light(int32, int32, float32, float32, float32);
    void rotate_around_to_x_light(int32, int32, float32);
    void rotate_around_to_y_light(int32, int32, float32);
    void rotate_around_to_z_light(int32, int32, float32);
    void color_light_float(int32, float32, float32, float32, float32);
    void color_light_int(int32, int32, int32, int32, int32);
    void glow_light(int32);
    void positional_light(int32);
    void directional_light(int32);
    void toggle_light(int32);
    cbool is_directional_light(int32);
    void update_light(int32);

    cbool available_obj_element(int32);
    cbool load_obj_element(int32, cstring);
    void free_obj_element(int32);
    void flip_yz_obj_element(int32, cbool);
    cbool get_flip_yz_obj_element(int32);

    void axis_plot(int32, float32, float32, float32, float32);
}

var WINDOW = 0
var DT = 1
var KEYBOARD = 1
var MOUSE = 1

var MODE_3D = true
var MODE_2D = false

enum Modes
{
    M3D = true,
    M2D = false
}

enum Elements
{
    Container = 0, 
    Point, 
    Line, 
    Polygon, 
    Triangle, 
    Rectangle, 
    Circle, 
    Sequence, 
    Loop, 
    ConnectedTriangles, 
    RadialTriangles, 
    ConnectedRectangles, 
    Sphere, 
    Cone, 
    Cube, 
    Cylinder, 
    Teapot, 
    Text, 
    Object
}

enum Fonts 
{ 
    Default8x13 = 0, 
    Default9x15, 
    TimesRoman10, 
    TimesRoman24, 
    Helvetica10, 
    Helvetica12, 
    Helvetica18, 
    Custom 
}

enum Align
{
    Left = 1,
    CenterX = 2,
    Right = 4,
    Top = 8,
    CenterY = 16,
    Bottom = 32
}

enum Keys
{
    F1 = 1,
    F2 = 2,
    F3 = 3,
    F4 = 4,
    F5 = 5,
    F6 = 6,
    F7 = 7,
    F8 = 8,
    F9 = 9,
    F10 = 10,
    F11 = 11,
    F12 = 12,
    Esc = 27,
    Left = 100,
    Up = 101,
    Right = 102,
    Down = 103,
    PageUp = 104,
    PageDown = 105,
    Home = 106,
    End = 107,
    Insert = 108
}

class Element
{
    var id
    func init(id)
    {
        this.id = id
    }

    func addPoint(x, y, z)
    {
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        return new_point_element(id, x, y, z)
    }

    func add(type)
    {
        return Element(add_element(id, type))
    }

    func rotate(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        rotate_element(id, x, y, z)
        return this
    }

    func rotateTo(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        rotate_to_element(id, x, y, z)
        return this
    }

    func rotateToX(val)
    {   
        if(val is not num)
            val = 0
        rotate_to_x_element(id, val)
        return this
    }

    func rotateToY(val)
    {   
        if(val is not num)
            val = 0
        rotate_to_y_element(id, val)
        return this
    }

    func rotateToZ(val)
    {   
        if(val is not num)
            val = 0
        rotate_to_z_element(id, val)
        return this
    }

    func translate(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        translate_element(id, x, y, z)
        return this
    }

    func move(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        move_element(id, x, y, z)
        return this
    }

    func flip(x, y, z)
    {   
        if(x is not bool)
            x = false
        if(y is not bool)
            y = false
        if(z is not bool)
            z = false
        flip_element(id, x, y, z)
        return this
    }

    func scale(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = x
        if(z is not num)
            z = y
        scale_element(id, x, y, z)
        return this
    }

    func scaleTo(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = x
        if(z is not num)
            z = y
        scale_to_element(id, x, y, z)
        return this
    }

    func color(r, g, b, a)
    {
        if(r is null)
            r = 0
        if(g is null)
            g = r
        if(b is null)
            b = g
        if(a is null)
        {
            if(r > 1 or g > 1 or b > 1)
                a = 255
            else
                a = 1
        }
        
        if(r > 1 or g > 1 or b > 1 or a > 1)
            color_element_int(id, r, g, b, a)
        else
            color_element_float(id, r, g, b, a)
        return this
    }

    func colorPoint(point, r, g, b, a)
    {
        if(point is not num)
            point = 0
        if(r is null)
            r = 0
        if(g is null)
            g = r
        if(b is null)
            b = g
        if(a is null)
        {
            if(r > 1 or g > 1 or b > 1)
                a = 255
            else
                a = 1
        }
        
        if(r > 1 or g > 1 or b > 1 or a > 1)
            color_point_element_int(id, point, r, g, b, a)
        else
            color_point_element_float(id, point, r, g, b, a)
        return this
    }

    func wireframe(enabled)
    {
        if(enabled is not bool)
            enabled = true
        wireframe_element(id, enabled)
        return this
    }

    func text(txt, font)
    {
        if(txt is not str)
            txt = str(txt)
        if(font is not num)
        {
            if(font is not Fonts)
                font = Fonts.Default8x13
        }
        
        set_text_element(id, txt, font)
        return this
    }

    func point(x, y, z, index)
    {        
        if(z is not num)
            point2d(x, y, index)
        else
            point3d(x, y, z, index)
        return this
    }

    func point2d(x, y, index)
    {
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(index is not num)
            index = 0
        
        point_2d_element(id, x, y, index)
        return this
    }

    func point3d(x, y, z, index)
    {
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        if(index is not num)
            index = 0
        point_3d_element(id, x, y, z, index)
        return this
    }

    func line(x1, y1, z1, x2, y2, z2, index)
    {   
        if(z1 is not num or z2 is not num)
            return line2d(x1, y1, x2, y2, index)
        else
            return line3d(x1, y1, z1, x2, y2, z2, index)
    }

    func line2d(x1, y1, x2, y2, index)
    {
        if(x1 is not num)
            x1 = 0
        if(y1 is not num)
            y1 = 0
        if(x2 is not num)
            x2 = 0
        if(y2 is not num)
            y2 = 0
        if(index is not num)
            index = 0
        line_2d_element(id, x1, y1, x2, y2, index)
        return this
    }

    func line3d(x1, y1, z1, x2, y2, z2, index)
    {
        if(x1 is not num)
            x1 = 0
        if(y1 is not num)
            y1 = 0
        if(z1 is not num)
            z1 = 0
        if(x2 is not num)
            x2 = 0
        if(y2 is not num)
            y2 = 0
        if(z2 is not num)
            z2 = 0
        if(index is not num)
            index = 0
        
        line_3d_element(id, x1, y1, z1, x2, y2, z2, index)
        return this
    }

    func triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3, index)
    {        
        if(z1 is not num or z2 is not num or z3 is not num)
            return triangle2d(x1, y1, x2, y2, x3, y3, index)
        else
            return triangle3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, index)
    }

    func triangle2d(x1, y1, x2, y2, x3, y3, index)
    {
        if(x1 is not num)
            x1 = 0
        if(y1 is not num)
            y1 = 0
        if(x2 is not num)
            x2 = 0
        if(y2 is not num)
            y2 = 0
        if(x3 is not num)
            x3 = 0
        if(y3 is not num)
            y3 = 0
        if(index is not num)
            index = 0
        
        triangle_2d_element(id, x1, y1, x2, y2, x3, y3, index)
        return this
    }

    func triangle3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, index)
    {
        if(x1 is not num)
            x1 = 0
        if(y1 is not num)
            y1 = 0
        if(z1 is not num)
            z1 = 0
        if(x2 is not num)
            x2 = 0
        if(y2 is not num)
            y2 = 0
        if(z2 is not num)
            z2 = 0
        if(x3 is not num)
            x3 = 0
        if(y3 is not num)
            y3 = 0
        if(z3 is not num)
            z3 = 0
        if(index is not num)
            index = 0
        
        triangle_3d_element(id, x1, y1, z1, x2, y2, z2, x3, y3, z3, index)
        return this
    }

    func rectangle(x1, y1, z1, x2, y2, z2, index)
    {        
        if(z1 is not num or z2 is not num)
            return rectangle2d(x1, y1, x2, y2, index)
        else
            return rectangle3d(x1, y1, z1, x2, y2, z2, index)
    }

    func rectangle2d(x1, y1, x2, y2, index)
    {
        if(x1 is not num)
            x1 = 0
        if(y1 is not num)
            y1 = 0
        if(x2 is not num)
            x2 = 0
        if(y2 is not num)
            y2 = 0
        if(index is not num)
            index = 0
        
        rectangle_2d_element(id, x1, y1, x2, y2, index)
        return this
    }

    func rectangle3d(x1, y1, z1, x2, y2, z2, index)
    {
        if(x1 is not num)
            x1 = 0
        if(y1 is not num)
            y1 = 0
        if(z1 is not num)
            z1 = 0
        if(x2 is not num)
            x2 = 0
        if(y2 is not num)
            y2 = 0
        if(z2 is not num)
            z2 = 0
        if(index is not num)
            index = 0
        
        rectangle_3d_element(id, x1, y1, z1, x2, y2, z2, index)
        return this
    }

    func circle(x, y, z, r, index)
    {        
        if(z is not num)
            return circle2d(x, y, r, index)
        else
            return circle3d(z, y, z, r, index)
    }

    func circle2d(x, y, r)
    {
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(r is not num)
            r = 1
        
        circle_2d_element(id, x, y, r)
        return this
    }

    func circle3d(x, y, z, r)
    {
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        if(r is not num)
            r = 1
        circle_3d_element(id, x, y, z, r)
        return this
    }

    func glow(start, scale)
    {
        if(start is not num)
            start = 0
        if(scale is not num)
            scale = 1
        glow_element(id, start, scale)
        return this
    }

    func glowAt(index, pos)
    {
        if(index is not num)
            index = 0
        if(pos is not num)
            pos = -1
        glow_at_element(id, index, scale)
        return this
    }

    func map()
    {
        map_element(id)
        return this
    }

    func reshape(n, byElement)
    {
        if(n is not num)
            n = 0
        if(byElement is not bool)
            byElement = true
        reshape_element(id, n, byElement)
        return this
    }

    func textWidth()
    {
        return text_width_element(id)
    }

    func textHeight()
    {
        return text_heigth_element(id)
    }

    func align(align)
    {
        if(align is null)
            align = Align.CenterX
        text_align_element(id, align)
        return this
    }

    func fontLoaded()
    {
        return loaded_font_element(id)
    }

    func loadFont(fileName)
    {
        if(fileName is not str)
            fileName = str(fileName)
        return load_font_element(id, fileName)
    }

    func fillFont(data)
    {
        if(data is not bytes)
            return false
        return fill_font_element(id, data)
    }

    func defaultFont(font)
    {
        if(font is not num)
        {
            if(font is not Fonts)
                font = Fonts.Default8x13
        }
        default_font_element(id, font)
        return this
    }

    func textureAvailable()
    {
        return available_texture_element(id)
    }

    func loadTexture(fileName)
    {
        if(fileName is not str)
            fileName = str(fileName)
        return load_texture_element(id, fileName)
    }

    func fillTexture(width, height, bpp, data)
    {
        if(width is not num or height is not num or bpp is not num)
            return this
        if(data is not bytes)
            return this
        fill_texture_element(id, width, height, bpp, data)
        return this
    }

    func updateTexture(data)
    {
        if(data is not bytes)
            return this
        return update_texture_element(id, data)
        return this
    }

    func applyColors(apply)
    {
        if(apply is null)
            return get_apply_colors_element(id)
        else
            apply_colors_element(id, apply)
        return this
    }

    func stroke(value)
    {
        if(value is null)
            return get_stroke_element(id)
        else
            stroke_element(id, value)
        return this
    }

    func visible(value)
    {
        if(value is null)
            return get_visible_element(id)
        else
            visible_element(id, value)
        return this
    }

    func textureDevice(device)
    {
        if(device is null)
            device = 0
        if(device is num)
            return capture_device_int_texture_element(id, device)
        else if(device is str)
            return capture_device_string_texture_element(id, device)
        return false
    }

    func captureDevice()
    {
        capture_device_texture_element(id)
        return this
    }

    func autoCaptureDevice(auto)
    {
        if(auto is null)
            return get_auto_capture_texture_element(id)
        else
            auto_capture_texture_element(id, auto)
        return this
    }

    func objAvailable()
    {
        return available_obj_element(id)
    }

    func loadObj(fileName)
    {
        if(fileName is not str)
            fileName = str(fileName)
        return load_obj_element(id, fileName)
    }

    func freeObj()
    {
        free_obj_element(id)
        return this
    }

    func flipObj(flip)
    {
        if(flip is null)
            return get_flip_yz_obj_element(id)
        else
            flip_yz_obj_element(id, flip)
        return this
    }
}

class Light
{
    var id
    func init(id)
    {
        if(id is not num)
            id = 0
        this.id = id
    }

    func rotate(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        rotate_light(id, x, y, z)
        return this
    }

    func rotateTo(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        rotate_to_light(id, x, y, z)
        return this
    }

    func rotateToX(val)
    {   
        if(val is not num)
            val = 0
        rotate_to_x_light(id, val)
        return this
    }

    func rotateToY(val)
    {   
        if(val is not num)
            val = 0
        rotate_to_y_light(id, val)
        return this
    }

    func rotateToZ(val)
    {   
        if(val is not num)
            val = 0
        rotate_to_z_light(id, val)
        return this
    }

    func translate(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        translate_light(id, x, y, z)
        return this
    }

    func move(x, y, z)
    {   
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        move_light(id, x, y, z)
        return this
    }

    func rotateAround(element, x, y, z)
    {   
        if(element is not num)
        {
            if(element is Element)
            {
                element = element.id
            }
        }
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        rotate_around_light(id, element, x, y, z)
        return this
    }


    func rotateAroundTo(element, x, y, z)
    {   
        if(element is not num)
        {
            if(element is Element)
            {
                element = element.id
            }
        }
        if(x is not num)
            x = 0
        if(y is not num)
            y = 0
        if(z is not num)
            z = 0
        rotate_around_to_light(id, element, x, y, z)
        return this
    }

    func rotateAroundToX(element, val)
    {   
        if(element is not num)
        {
            if(element is Element)
            {
                element = element.id
            }
        }
        if(val is not num)
            val = 0
        rotate_around_to_x_light(id, element, val)
        return this
    }

    func rotateAroundToY(element, val)
    {   
        if(element is not num)
        {
            if(element is Element)
            {
                element = element.id
            }
        }
        if(val is not num)
            val = 0
        rotate_around_to_y_light(id, element, val)
        return this
    }

    func rotateAroundToZ(element, val)
    {   
        if(val is not num)
            val = 0
        rotate_around_to_z_light(id, element, val)
        return this
    }

    func color(r, g, b, a)
    {
        if(r is null)
            r = 0
        if(g is null)
            g = r
        if(b is null)
            b = g
        if(a is null)
        {
            if(r > 1 or g > 1 or b > 1)
                a = 255
            else
                a = 1
        }
        
        if(r > 1 or g > 1 or b > 1 or a > 1)
            color_light_int(id, r, g, b, a)
        else
            color_light_float(id, r, g, b, a)
        return this
    }

    func glow()
    {
        glow_light(id)
        return this
    }


    func update()
    {
        update_light(id)
        return this
    }

    func directional()
    {
        directional_light(id)
        return this
    }

    func positional()
    {
        positional_light(id)
        return this
    }


    func toggle()
    {
        toggle_light(id)
        return this
    }


    func isDirectional()
    {
        return is_directional_light(id)
    }
}

class Plot : Element
{
    func init(id)
    {
        this.id = id
    }

    func axis(minX, maxX, minY, maxY)
    {
        if(minX is not num)
            minX = -1
        if(maxX is not num)
            maxX = 1
        if(minY is not num)
            minY = -1
        if(maxY is not num)
            maxY = 1
        axis_plot(id, minX, maxX, minY, maxY)
    }
}

class BGL
{
    static var capture_filename = null

    static func create(name, is3d, fps, width, height, x, y)
    {
        if(fps is not num)
            fps = 30
        if(width is not num)
            width = 0
        if(height is not num)
            height = width
        if(x is not num)
            x = -1
        if(y is not num)
            y = -1
        return create_window(name, is3d, fps, width, height, x, y);
    }

    static func select(id)
    {
        select_window(id);
    }

    static func cartesian(enabled)
    {
        set_cartesian(enabled)
    }

    static func zplane()
    {
        return z_plane();
    }

    static func isOpen()
    {
        return is_open();
    }

    static func isFullscreen()
    {
        return is_fullscreen();
    }

    static func width()
    {
        return window_width();
    }

    static func height()
    {
        return window_height();
    }

    static func background(r, g, b)
    {
        if(r is null)
            r = 0
        if(g is null)
            g = r
        if(b is null)
            b = g
        
        if(r > 1 or g > 1 or b > 1)
            set_background_int(r, g, b)
        else
            set_background_float(r, g, b)
    }


    static func capture(fileName)
    {
        BGL.capture_filename = fileName
    }

    static func startRecording(fileName, fps)
    {
        if(fps is not num)
            fps = 30
        return start_recording(fileName, fps);
    }

    static func stopRecording()
    {
        stop_recording();
    }

    static func pause(secs)
    {   
        if(secs is not null)
            secs = 0
        pause_bgl(secs)

        if(BGL.capture_filename is not null)
        {
            capture_bgl(BGL.capture_filename);
            BGL.capture_filename = null
        }
    }

    static func show()
    {
        while(isOpen())
        {
            pause()
        }
    }

    static func add(type, name)
    {
        if(name is not str)
            name = "";
        return Element(create_element(type, name))
    }

    static func plot(rows, cols, index, name)
    {
        if(rows is not num)
            rows = 1
        if(cols is not num)
            cols = 1
        if(index is not num)
            index = 1
        if(name is not str)
            name = "";
        return Plot(create_plot(rows, cols, index, name))
    }

    static func onAnimate(fn)
    {
        if(fn is func)
        {
            set_animation_callback(fn);
        }
    }

    static func onKeyboard(fn)
    {
        if(fn is func)
        {
            set_keyboard_callback(fn);
        }
    }

    static func onMouse(fn)
    {
        if(fn is func)
        {
            set_mouse_callback(fn);
        }
    }

    static func find(name)
    {
        if(name is not str)
            return;
        return Element(find_element(name))
    }

    static func time()
    {
        return time_window()
    }

    static func light(id)
    {
        if(id is not num)
            id = 0
        return Light(id)
    }

    static func textureDeviceSupported()
    {
        return supports_capture_texture_element()
    }
}

