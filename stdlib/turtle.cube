import bgl as default
import math

enum Types
{
    Point = 1, 
    Line, 
    Polygon, 
    Triangle, 
    Rectangle, 
    Circle, 
    Sequence, 
    Loop, 
    ConnectedTriangles, 
    RadialTriangles, 
    ConnectedRectangles
}

var width = 0, height = 0
var dim = 0
var x = 0, y = 0, head = 0
var penColor = [255, 0, 0]
var isPenDown = true
var ratio = 1.0
var animated = true
var speed = 20
var glow = true
var visible = true
var pathType = Types.Sequence
var glyphAngle = 1.57
var glyphScale = 0
var stroke = 1
var pathInited = false
var bounds = null

var glyph = null;
var path = null;

func init(title, w, h, type)
{
    if(title is null)
        title = 'Turtle'
    if(w is not num)
        w = 600
    if(h is not num)
        h = 600
    if(type is not Types)
        type = Types.Sequence

    width = w
    height = h
    dim = math.max(width, height)
    ratio = 4 / dim
    pathType = type
    bounds = [-width/2, height/2, width/2, -height/2] 

    BGL.create(title, Modes.M2D, width, height)   
    
    background('black')
    color('white')

    glyphScale = 100 / dim

    initGlyph()
}

func initGlyph()
{
    glyph = BGL.add(Elements.Triangle)
    glyph.scaleTo(glyphScale)
}

func initPath()
{
    pathInited = true
    path = BGL.add(pathType)
    path.stroke(stroke)
    var p = path.addPoint(x * ratio, y * ratio)
    if(glow)
        path.glow()
    else
        path.colorPoint(p, penColor[0], penColor[1], penColor[2])
}

func running()
{
    return BGL.isOpen()
}

func inside(x, y)
{
    if(x is list)
    {
        y = x[1]
        x = x[0]
    }

    if(x < bounds[0] or x > bounds[2] or y > bounds[1] or y < bounds[3])
        return false
    return true
}

func size(sz)
{
    glyphScale = (5 * sz) / dim
    if(glyph is not null)
        glyph.scaleTo(glyphScale)
}

func stamp()
{
    initGlyph()
}

func getColor(name)
{
    if(name == 'red')
        return [255, 0, 0]
    else if(name == 'blue')
        return [0, 0, 255]
    else if(name == 'green')
        return [0, 255, 0]
    else if(name == 'cyan')
        return [0, 255, 255]
    else if(name == 'yellow')
        return [255, 255, 0]
    else if(name == 'magenta')
        return [255, 0, 255]
    else if(name == 'black')
        return [0, 0, 0]
    else if(name == 'white')
        return [255, 255, 255]
    else if(name == 'gray')
        return [150, 150, 150]
    return [255, 0, 0]
}

func background(r, g, b)
{
    if(r is str)
        r = getColor(r)

    if(r is list)
    {
        b = r[2]
        g = r[1]
        r = r[0]
    }

    if(r is not num)
        r = 0
    if(g is not num)
        g = 0
    if(b is not num)
        b = 0
    BGL.background(r, g, b)
}
var bg = background

func color(r, g, b)
{
    if(r is str)
        r = getColor(r)

    if(r is list)
    {
        b = r[2]
        g = r[1]
        r = r[0]
    }

    if(r is not num)
        r = 0
    if(g is not num)
        g = 0
    if(b is not num)
        b = 0
    
    penColor = [r, g, b]
}
var cl = color

func draw()
{
    glyph.visible(visible)
    if(visible)
    {
        glyph.move(x * ratio, y * ratio, 0)
        glyph.rotateTo(0, 0, head + glyphAngle)
    }
       
}

func step()
{
    draw()
    BGL.pause()
}

func show()
{
    draw()
    BGL.show()
}

func pen(down)
{
    pathInited = true
    isPenDown = bool(down)
    if(down)
    {
        if(path is null)
        {
            initPath()
        }
    }
    else
        path = null
}

func penDown()
{
    pen(true)
}

func penUp()
{
    pen(false)
}

func _forward(dist)
{
    var lx = x + dist * cos(head)
    var ly = y + dist * sin(head)

    if(isPenDown and (path is not null or pathInited == false))
    {
        if(path is null)
            initPath()

        var line = path.addPoint(lx * ratio, ly * ratio)
        if(glow)
            path.glow()
        else
            path.colorPoint(line, penColor[0], penColor[1], penColor[2])
    }

    x = lx
    y = ly

    if(animated)
        step()
}

func next(dist, deg)
{
    var h = head
    if(angle is num)
        h += deg * 0.0174533
    var lx = x + dist * cos(h)
    var ly = y + dist * sin(h)
    return [lx, ly]
}

func forward(dist)
{
    if(animated)
    {
        for(var i = 0; i < dist; i += speed)
        {
            _forward(math.min(speed, dist - i));
        }
    }
    else
    {
        _forward(dist)
    }
}
var fd = forward

func backward(size)
{
    turn(180)
    forward(size)
}
var back = backward
var bk = backward

func left(size)
{
    turn(90)
    forward(size)
}
var lt = left

func right(size)
{
    turn(-90)
    forward(size)
}
var rt = right

func turn(deg)
{
    head += deg * 0.0174533
    if(animated)
        step()
}

func home()
{
    goto(0, 0)
    head = 0
}

func goto(gx, gy)
{
    if(gx is not num)
        gx = 0
    if(gy is not num)
        gy = 0
        
    var dx = gx - x
    var dy = gy - y
    var p = math.sqrt(dx*dx + dy*dy)
    head = atan2(dy, dx)
    forward(p)
}

func distance(gx, gy)
{
    if(gx is not num)
        gx = 0
    if(gy is not num)
        gy = 0
        
    var dx = gx - x
    var dy = gy - y
    var p = math.sqrt(dx*dx + dy*dy)
    return p
}

func angle(gx, gy)
{
    if(gx is not num)
        gx = 0
    if(gy is not num)
        gy = 0
        
    var dx = gx - x
    var dy = gy - y
    var a = atan2(dy, dx) * 57.2958
    return a
}

func position(vx, vy)
{
    if(vx is num)
        x = vx
    if(vy is num)
        y = vy
    return [x, y]
}
var pos = position

func heading(value)
{
    if(value is num)
        head = value * 0.0174533
    return head * 57.2958
}
var hd = heading


func polygon(sides, radius)
{
    if(sides is not num)
        sides = 8
    if(radius is not num)
        radius = 100

    var size = (6.28 * radius) / sides

    var inc = 360 / sides
    for(var i = 0; i < sides; i++)
    {
        turtle.forward(size)
        turtle.turn(inc)
    }
}

func circle(radius)
{
    polygon(36, radius)
}