native libs/libnet
{
    num tcp_udp_socket_create(num, str, bool, bool, bool, bool, num);
    bool tcp_udp_socket_close(num);
    num tcp_udp_socket_send(num, bytes);
    num tcp_udp_socket_send_to(num, str, bytes);
    bytes tcp_udp_socket_receive(num);
    bool tcp_udp_socket_wait(num);
    void tcp_udp_socket_disconnect(num);
    str tcp_udp_socket_client(num);
}

import paths;

class Socket
{
    var address = "127.0.0.1";
    var port = 9999;
    var udp = false;
    var broadcast = false;
    var reuseSocket = true;
    var isServer = false;
    var timeout = 1000;

    var pointer = none;

    func open()
    {
        this.pointer = tcp_udp_socket_create(   this.port,
                                                this.address,
                                                this.udp,
                                                this.broadcast,
                                                this.reuseSocket,
                                                this.isServer,
                                                this.timeout);

        return this.pointer != none;
    }

    func close()
    {
        return tcp_udp_socket_close(this.pointer);
    }

    func send(data)
    {
        if(data is not bytes)
            data = bytes(data);
        return tcp_udp_socket_send(this.pointer, data);
    }

    func sendTo(data)
    {
        if(data is not bytes)
            data = bytes(data);
        return tcp_udp_socket_send_to(this.pointer, data);
    }

    func receive()
    {
        return tcp_udp_socket_receive(this.pointer);
    }

    func wait()
    {
        return tcp_udp_socket_wait(this.pointer);
    }

    func disconnect()
    {
        return tcp_udp_socket_disconnect(this.pointer);
    }

    func client()
    {
        return tcp_udp_socket_client(this.pointer);
    }
}

class HTTP
{
    static var PORT = 80;
    static var SUCCESS = 201;
    static var NOT_FOUND = 404;
}

class HTTPServer
{
    var running = false;
    var code = 201;
    var port = 8080;

    var onGet = @(server, client, request, data)
    {
        var response = '';
        var f = open(request, "rb");
        if(f is none)
            server.setCode(HTTP.NOT_FOUND);
        else
        {
            response = f.read();
            f.close();
        }
        return response;
    };
    var onPost = @(server, client, request, data)
    {
        var response = '';
        var f = open(request, "rb");
        if(f is none)
            server.setCode(HTTP.NOT_FOUND);
        else
        {
            response = f.read();
            f.close();
        }
        return response;
    };

    func init(port)
    {
        this.port = port;
    }

    func run()
    {
        var socket = Socket();
        socket.port = this.port;
        socket.isServer = true;

        if(this.running)
            return true;

        if(socket.open() == false)
            return false;
        
        this.running = true;
        while(this.running)
        {
            if(socket.wait() == false)
            {
                this.kill();
                return false;
            }

            var client = socket.client();
            var received = str(socket.receive());
            var mode = none;
            var request = none;
            var response = none;
            var data = {};

            var lines = received.split('\r\n');
            for(var i = 0; i < len(lines); ++i)
            {
                var parts = lines[i].split(' ');
                if(parts[0] == 'GET' or parts[0] == 'POST')
                {
                    data['mode'] = parts[0];
                    var reqData = parts[1].split('?');
                    var req = reqData[0];
                    if(req.startsWith('/'))
                    {
                        if( len(parts[1]) == 1 )
                            data['request'] = '';
                        else
                            data['request'] = req.from(1);
                    }
                    else
                        data['request'] = req;
                    var reqArgs;
                    if(len(reqData) > 1)
                        reqArgs = reqData[1];
                    else
                        reqArgs = "";

                    data['args'] = dict(reqArgs, '&', '=');
                }
                else if(len(parts) > 1)
                {
                    var field = parts[0].replace(':', '');
                    var value = parts[ 1...len(parts) ].join(' ');
                    data[field] = value;
                }
                else if(len(parts) == 1 and isempty(parts[0]))
                {
                    ++i;
                    parts = lines[i].split(' ');
                    data['data'] = dict(parts[0], '&', '=');
                }
            }
            
            mode = data['mode'];
            request = data['request'];

            if(mode == 'GET' and request is not none and this.onGet is func)
            {
                response = this.onGet(this, client, request, data);
            }

            if(mode == 'POST' and request is not none and this.onPost is func)
            {
                response = this.onPost(this, client, request, data);
            }

            if(response != none)
            {
                var codeStr = str(this.code);
                if(this.code == HTTP.SUCCESS)
                    codeStr += ' Success';
                else if(this.code == HTTP.NOT_FOUND)
                    codeStr += ' Not Found';

                var fmtStr = this.getMime(request);

                this.code = HTTP.SUCCESS;
                var ret = 'HTTP/1.1 {}\nContent-Type: {}; charset=utf-8\n\n'.format(codeStr, fmtStr);
                socket.send(ret);
                socket.send(response);
            }

            socket.disconnect();
        }
        
        this.kill();
        socket.close();
        return true;
    }

    func getMime(page)
    {
        var mime = "text/html";
        if(isempty(page))
            return mime;

        var ext = paths.extension(page);
        if(ext == "aac")
            mime = "audio/aac";
        else if(ext == "avi")
            mime = "video/x-msvideo";
        else if(ext == "bin")
            mime = "application/octet-stream";
        else if(ext == "bz")
            mime = "application/x-bzip";
        else if(ext == "css")
            mime = "text/css";
        else if(ext == "html" or ext == "htm")
            mime = "text/html";
        else if(ext == "gif")
            mime = "image/gif";
        else if(ext == "ico")
            mime = "image/x-icon";
        else if(ext == "jpg" or ext == "jpeg")
            mime = "image/jpeg";
        else if(ext == "js")
            mime = "application/javascript";
        else if(ext == "json")
            mime = "application/json";
        else if(ext == "png")
            mime = "image/png";

        return mime;
    }

    func kill()
    {
        this.running = false;
        
    }

    func get(onGet)
    {
        this.onGet = onGet;
    }

    func post(onPost)
    {
        this.onPost = onPost;
    }

    func setCode(code)
    {
        this.code = code;
    }
}

class HTTPClient
{
    var address = "127.0.0.1";
    var host = none;
    var port = 8080;
    var socket = none;
    var waitTime = 10;

    func init(address, port)
    {
        this.address = address;
        this.port = port;
    }

    func connect()
    {
        if(this.socket is not none)
            return true;

        this.host = this.address.replace('https://', '');
        this.host = this.host.replace('http://', '');

        this.socket = Socket();
        this.socket.port = this.port;
        this.socket.address = this.address;
        return this.socket.open();
    }

    func disconnect()
    {
        if(this.socket is none)
            return true;
        
        var ret = this.socket.disconnect();
        if(ret)
            this.socket = none;
        return ret;
    }

    func get(request)
    {
        if(this.socket is none)
            return none;

        var data = 'GET /{} HTTP/1.1\nHost: {}'.format(request, this.host);
        var ret = this.socket.send(data);
        wait(this.waitTime);
        return ret;
    }

    func post(request)
    {
        if(this.socket is none)
            return none;

        var data = 'POST {} HTTP/1.1\nHost: {}'.format(request, this.gost);
        var ret =  this.socket.send(data);
        wait(this.waitTime);
        return ret;
    }

    func receive()
    {
        if(this.socket is none)
            return none;

        var contents = none;
        var data = str(this.socket.receive());
        var pos = data.find('\n\n');
        if(pos >= 0)
        {
            contents = data.from(pos + 2);
        }

        return contents;
    }
}