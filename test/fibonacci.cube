func fibRecursive(n)
{
    if(n < 2)
        return n;
    else
        return fibRecursive(n - 1) + fibRecursive(n - 2);
}

func fibTask(n) 
{
    if (n < 2)
        return n;
    else 
    {
       var t1 = async fibTask(n - 1);
       var t2 = async fibTask(n - 2);

       var x = await t1;
       var y = await t2;
    
       return x + y;
    }
}


func fibIterative(n)
{
    var j = 1;
    var i = 0;
    for (var k = 1; k < n; ++k)
    {
        var t = i + j;
        i = j;
        j = t;
    }
    return j;
}


var start;
var result;
var time;

start = clock();
result = fibRecursive(10);
time = clock()-start;
println("Fibonacci Recursive(10) = ", result, " [", time, "]");

start = clock();
result = fibIterative(10);
time = clock()-start;
println("Fibonacci Iterative(10) = ", result, " [", time, "]");

start = clock();
result = fibTask(10);
time = clock()-start;
println("Fibonacci Parallelized(10) = ", result, " [", time, "]");