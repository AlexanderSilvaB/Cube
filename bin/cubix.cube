#!/usr/local/bin/cube

cube
{
    title = "Cubix",
    description = "The cube module manager",
    bin = "cubix"
}

import json;
import curl;
import os;
import paths;
import zip;
import parser as default;

var parser = Parser('Cubix', 'The cube module manager', '0.1');
parser.add('install', 'i', str, '+', 'selects the module to install');
parser.add('uninstall', 'u', str, '+', 'selects the module to uninstall');
parser.add('list', 'l', null, 0, 'list installed modules');
parser.add('online', 'o', null, 0, 'list online modules');
parser.add('force', 'f', null, 0, 'force install or uninstall');
parser.add('description', 'd', str, '+', 'gets the description of the module');

parser.parse(args);

var address = 'https://raw.githubusercontent.com/AlexanderSilvaB/cube-modules/master/';

func readWeb(request)
{
    var url = address+request;
    var contents = curl.get(url);
    if(contents is null)
        throw('Failed to get [', url, ']');
    return str(contents);
}

func install(force, libs)
{
    println('Installing: ', libs.join(' '));

    var rm = []
    for(var lib in libs)
    {
        if(lib.endsWith('.zip'))
        {
            installFileModule(force, lib);
            rm.add(lib)
        }
    }

    for(var lib in rm)
    {
        libs.remove(lib)
    }

    if(len(libs) == 0)
        return;

    var contents = readWeb('index.json');
    var modules = json.parseJson(contents)['modules'];

    var module = null;

    for(var lib in libs)
    {
        if(lib.endsWith('.zip'))
            continue;

        module = null;
        for(var p in modules)
        {
            if(p.endsWith('/{}'.format(lib)))
            {
                module = p;
            }
        }

        if(module is null)
            throw('Module "', lib, '" not found!');

        installModule(force, lib, module);
    }
}

func uninstall(force, libs)
{
    println('Uninstalling: ', libs.join(' '));

    for(var lib in libs)
    {
        uninstallModule(force, lib);
    }   
}

func description(libs)
{
    println('Describing: ', libs.join(' '));

    var rm = []
    for(var lib in libs)
    {
        if(lib.endsWith('.zip'))
        {
            descriptionFileModule(lib);
            rm.add(lib)
        }
    }

    for(var lib in rm)
    {
        libs.remove(lib)
    }

    if(len(libs) == 0)
        return;

    var contents = readWeb('index.json');
    var modules = json.parseJson(contents)['modules'];

    var module = null;

    for(var lib in libs)
    {
        if(lib.endsWith('.zip'))
            continue;

        module = null;
        for(var p in modules)
        {
            if(p.endsWith('/{}'.format(lib)))
            {
                module = p;
            }
        }

        if(module is null)
            throw('Module "', lib, '" not found!');

        descriptionModule(lib, module);
    }
}

func listModules()
{
    var files = ls(os.allowedLibsPath);
    var size = 0;
    for(var file in files)
    {
        if(file.endsWith('.json'))
        {
            if(listModule(file))
                ++size;
        }
    }
    
    if(size == 0)
        println("No modules found");
}

func listOnlineModules()
{
    var contents = readWeb('index.json');
    var modules = json.parseJson(contents)['modules'];
    for(var p in modules)
    {
        print(p.split('/')[-1], ', ');
    }
    println('\b\b  ');
}

func installFileModule(force, libFile)
{
    println("File: ", libFile)
    if(!exists(libFile))
    {
        println("Invalid module file.")
        return;
    }
    
    var file = zip.Zip(libFile, 'r')
    var contents = file.read('module.json')
    if(contents is null)
    {
        println("Not a valid cube module.")
        return;
    }

    var module = json.parseJson(str(contents));
    var lib = module['name']
    if(lib is null)
    {
        println("Not a valid cube module.")
        return;
    }

    var current = null;
    try
    {
        var j = json.readJson("{}/{}.json".format(os.allowedLibsPath, lib));
        current = j['version'];
    }

    var version = module['version'];
    if(version is null)
    {
        println("Not a valid cube module.")
        return;
    }

    println("{} [{} -> {}]\t".format(lib, current, version));
    if(not force and current == version)
    {
        println("Already updated");
        return;
    }
    var data;
    var name;
    var path;

    path = os.allowedLibsPath+'/'+lib+'.json';

    with(path, 'w')
    {
        file.write(str(contents));
    }

    path = os.allowedBinPath + '/' + lib;
    if(!exists(path))
        mkdir(path, 777);

    path = os.allowedLibsPath + '/' + lib;
    if(!exists(path))
        mkdir(path, 777);
    
    path = os.allowedSamplesPath + '/' + lib;
    if(!exists(path))
        mkdir(path, 777);

    for(var f in module['files'])
    {
        print('Installing: ', f);
        data = file.read(f);
        if(data is null)
        {
            println('Failed!');
            continue;
        }
        name = paths.fileName(f);
        if(module['bin'] is list and name in module['bin'])
            path = os.allowedBinPath + '/' + lib;
        else   
            path = os.allowedLibsPath + '/' + lib;

        path += '/{}/{}'.format(name);
        
        with(path, 'w')
        {
            file.write(str(data));
        }

        println('\rInstalled: ', f, ' ');
    }

    for(var f in module['samples'])
    {
        print('Installing: ', f);
        data = file.read(f);
        if(data is null)
        {
            println('Failed!');
            continue;
        }
        name = paths.fileName(f);
        path = os.allowedSamplesPath + '/' + lib;

        path += '/{}'.format(name);
        
        with(path, 'w')
        {
            file.write(str(data));
        }

        println('\rInstalled: ', f, ' ');
    }

    for(var f in module['native'])
    {
        print('Installing: ', f);
        data = file.read('native/{}/{}/{}{}'.format(os.name, os.arch, f, os.libsExt));
        if(data is null)
        {
            println('Failed!');
            continue;
        }

        name = paths.fileName(f);
        path = os.allowedLibsPath + '/' + lib;
        path += '/{}{}'.format(name, os.libsExt);
        

        with(path, 'w')
        {
            file.write(str(data));
        }

        println('\rInstalled: ', f, ' ');
    }

    path = os.allowedLibsPath + '/' + lib + '/setup.cube';
    if(exists(path))
    {
        println('Running setup...')
        require(path)
    }
    println('Done!')
}

func installModule(force, lib, url)
{
    var contents = readWeb('{}/module.json'.format(url));
    var module = json.parseJson(contents);
    
    var current = null;
    try
    {
        var j = json.readJson("{}/{}.json".format(os.allowedLibsPath, lib));
        current = j['version'];
    }

    var version = module['version'];
    println("{} [{} -> {}]\t".format(lib, current, version));
    if(not force and current == version)
    {
        println("Already updated");
        return;
    }
    var data;
    var name;
    var path;

    path = os.allowedLibsPath+'/'+lib+'.json';

    with(path, 'w')
    {
        file.write(contents);
    }

    path = os.allowedBinPath + '/' + lib;
    if(!exists(path))
        mkdir(path, 777);

    path = os.allowedLibsPath + '/' + lib;
    if(!exists(path))
        mkdir(path, 777);
    
    path = os.allowedSamplesPath + '/' + lib;
    if(!exists(path))
        mkdir(path, 777);

    for(var f in module['files'])
    {
        print('Downloading: ', f);
        data = readWeb('{}/{}'.format(url, f));
        name = paths.fileName(f);
        if(module['bin'] is list and name in module['bin'])
            path = os.allowedBinPath + '/' + lib;
        else   
            path = os.allowedLibsPath + '/' + lib;

        path += '/{}'.format(name);
        
        with(path, 'w')
        {
            file.write(data);
        }

        println('\rDownloaded: ', f, ' ');
    }

    for(var f in module['samples'])
    {
        print('Downloading: ', f);
        data = readWeb('{}/{}'.format(url, f));
        name = paths.fileName(f);
           
        path = os.allowedSamplesPath + '/' + lib;

        path += '/{}'.format(name);
        
        with(path, 'w')
        {
            file.write(data);
        }

        println('\rDownloaded: ', f, ' ');
    }

    for(var f in module['native'])
    {
        print('Downloading: ', f);
        data = readWeb('{}/native/{}/{}/{}{}'.format(url, os.name, os.arch, f, os.libsExt));
        name = paths.fileName(f);
        path = os.allowedLibsPath + '/' + lib;
        path += '/{}{}'.format(name, os.libsExt);
        

        with(path, 'w')
        {
            file.write(data);
        }

        println('\rDownloaded: ', f, ' ');
    }

    path = os.allowedLibsPath + '/' + lib + '/setup.cube';
    if(exists(path))
    {
        println('Running setup...')
        require(path)
    }
    println('Done!')
}

func descriptionFileModule(libFile)
{
    println("File: ", libFile)
    if(!exists(libFile))
    {
        println("Invalid module file.")
        return;
    }
    
    var file = zip.Zip(libFile, 'r')
    var contents = file.read('module.json')
    if(contents is null)
    {
        println("Not a valid cube module.")
        return;
    }

    var module = json.parseJson(str(contents));
    var lib = module['name']
    if(lib is null)
    {
        println("Not a valid cube module.")
        return;
    }

    var current = null;
    try
    {
        var j = json.readJson("{}/{}.json".format(os.allowedLibsPath, lib));
        current = j['version'];
    }

    var version = module['version'];
    if(version is null)
    {
        println("Not a valid cube module.")
        return;
    }

    var desc = module['description'];
    var dependencies = module['dependencies'];

    println('Name: ', lib)
    println('Description: ', desc)
    if(current is not null)
        println('Installed version: ', current)
    println('Available version: ', version)
    if(dependencies is list)
    {
        if(len(dependencies) == 0)
            println('Dependencies: None')
        else
            println('Dependencies: ', dependencies.join(' '))
    }
    
    var name;

    println('Files')
    for(var f in module['files'])
    {
        name = paths.fileName(f);
    
        if(module['bin'] is list and name in module['bin'])
            println(' *', name)
        else   
            println(' ', name)
    }

    println('Samples')
    for(var f in module['samples'])
    {
        name = paths.fileName(f);
        println(' ', name);
    }


    println('Native')
    for(var f in module['native'])
    {
        name = paths.fileName(f);
        println(' ', name);
    }

}

func descriptionModule(lib, url)
{
    var contents = readWeb('{}/module.json'.format(url));
    var module = json.parseJson(contents);
    
    var current = null;
    try
    {
        var j = json.readJson("{}/{}.json".format(os.allowedLibsPath, lib));
        current = j['version'];
    }

    var version = module['version'];
    var desc = module['description'];
    var dependencies = module['dependencies'];

    println('Name: ', lib)
    println('Description: ', desc)
    if(current is not null)
        println('Installed version: ', current)
    println('Available version: ', version)
    if(dependencies is list)
    {
        if(len(dependencies) == 0)
            println('Dependencies: None')
        else
            println('Dependencies: ', dependencies.join(' '))
    }

    var name;

    println('Files')
    for(var f in module['files'])
    {
        name = paths.fileName(f);
        if(module['bin'] is list and name in module['bin'])
            println(' *', name);
        else   
            println(' ', name);
    }

    println('Samples')
    for(var f in module['samples'])
    {
        name = paths.fileName(f);
        println(' ', name);
    }

    println('Native')
    for(var f in module['native'])
    {
        name = paths.fileName(f);
        println(' ', name);
    }
}

func uninstallModule(force, lib)
{
    var module = json.readJson("{}/{}.json".format(os.allowedLibsPath, lib));
    if(module == null or len(module) == 0)
    {
        println("Not found!");
        return;
    }

    var name;
    var path;

    for(var f in module['files'])
    {
        print('Removing: ', f);
        name = paths.fileName(f);
        if(module['bin'] is list and name in module['bin'])
            path = os.allowedBinPath + '/' + lib;
        else   
            path = os.allowedLibsPath + '/' + lib;

        path += '/{}'.format(name);
        
        remove(path);

        println('\rRemoved: ', f, ' ');
    }

    for(var f in module['samples'])
    {
        print('Removing: ', f);
        name = paths.fileName(f);

        path = os.allowedSamplesPath + '/' + lib;

        path += '/{}'.format(name);
        
        remove(path);

        println('\rRemoved: ', f, ' ');
    }

    for(var f in module['native'])
    {
        print('Removing: ', f);
        name = paths.fileName(f);
        path = os.allowedLibsPath + '/' + lib;
        path += '/{}{}'.format(name, os.libsExt);
        
        remove(path);

        println('\rRemoved: ', f, ' ');
    }

    path = os.allowedBinPath + '/' + lib;
    remove(path);

    path = os.allowedLibsPath + '/' + lib;
    remove(path);

    path = os.allowedSamplesPath + '/' + lib;
    remove(path);

    path = os.allowedLibsPath+'/'+lib+'.json';
    remove(path);
}

func listModule(lib)
{
    var path = '{}/{}'.format(os.allowedLibsPath, lib);
    var module = json.readJson(path);
    if(module is null or len(module) == 0)
        return false;

    println(module['name'], ':', module['version'], '  [', module['description'], ']');
    return true;
}

if(!exists(os.allowedBinPath))
    mkdir(os.allowedBinPath, 777)
if(!exists(os.allowedLibsPath))
    mkdir(os.allowedLibsPath, 777)
if(!exists(os.allowedSamplesPath))
    mkdir(os.allowedSamplesPath, 777)

if(parser.args['install'] is not null and len(parser.args['install']) > 0 )
{
    install(parser.args['force'], parser.args['install']);
}
else if( parser.args['uninstall'] is not null and len(parser.args['uninstall']) > 0 )
{
    uninstall(parser.args['force'], parser.args['uninstall']);
}
else if( parser.args['list'])
{
    listModules();
}
else if( parser.args['online'] )
{
    listOnlineModules();
}
else if( parser.args['description'] is not null and len(parser.args['description']) > 0 )
{
    description(parser.args['description']);
}
else
{
    parser.header();
}
